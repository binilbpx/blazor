@page "/github-callback"
@using BalzorApp.Services
@inject IGitHubService GitHubService
@inject NavigationManager Navigation
@inject ILogger<GitHubCallback> Logger

<PageTitle>GitHub Authentication - BalzorApp</PageTitle>

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card border-0 shadow-sm mt-5">
                <div class="card-body text-center py-5">
                    @if (isLoading)
                    {
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <h4 class="mt-3">Connecting to GitHub...</h4>
                        <p class="text-muted">Please wait while we authenticate your account.</p>
                    }
                    else if (errorMessage != null)
                    {
                        <div class="text-danger mb-3">
                            <span class="oi oi-warning" style="font-size: 3rem;"></span>
                        </div>
                        <h4 class="text-danger">Authentication Failed</h4>
                        <p class="text-muted">@errorMessage</p>
                        <button class="btn btn-primary" @onclick="RetryAuthentication">
                            <span class="oi oi-reload me-2"></span>Try Again
                        </button>
                    }
                    else if (isSuccess)
                    {
                        <div class="text-success mb-3">
                            <span class="oi oi-check" style="font-size: 3rem;"></span>
                        </div>
                        <h4 class="text-success">Successfully Connected!</h4>
                        <p class="text-muted">Your GitHub account has been connected successfully.</p>
                        <button class="btn btn-primary" @onclick="GoToAnalytics">
                            <span class="oi oi-graph me-2"></span>Go to Analytics
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private bool isSuccess = false;
    private string? errorMessage;
    private bool shouldRedirect = false; // Flag to trigger redirect
    private static string? lastProcessedCode = null; // Static flag to prevent multiple executions

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            Logger.LogInformation("GitHub callback received. Full URI: {Uri}", uri);
            
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var code = query["code"];
            var error = query["error"];
            var state = query["state"];

            Logger.LogInformation("GitHub callback parameters - Code: {Code}, Error: {Error}, State: {State}", 
                !string.IsNullOrEmpty(code) ? "Present" : "Missing", 
                error, 
                state);

            if (!string.IsNullOrEmpty(error))
            {
                errorMessage = $"GitHub authentication failed: {error}";
                Logger.LogError("GitHub OAuth error: {Error}", error);
                isLoading = false;
                return;
            }

            // If no error and no code, user might already be authenticated
            if (string.IsNullOrEmpty(code))
            {
                Logger.LogInformation("No authorization code received, checking if already authenticated...");
                if (GitHubService.IsAuthenticated())
                {
                    Logger.LogInformation("User is already authenticated, will redirect to analytics");
                    shouldRedirect = true;
                    isLoading = false;
                    return;
                }
                else
                {
                    errorMessage = "No authorization code received from GitHub.";
                    Logger.LogError("No authorization code received from GitHub");
                    isLoading = false;
                    return;
                }
            }

            // Prevent processing the same code multiple times across component instances
            if (lastProcessedCode == code)
            {
                Logger.LogInformation("Authorization code already processed, skipping...");
                shouldRedirect = true; // Still redirect if already processed
                isLoading = false;
                return;
            }

            lastProcessedCode = code;
            Logger.LogInformation("Starting GitHub authentication with code...");
            // Authenticate with GitHub using the code
            var success = await GitHubService.AuthenticateWithCodeAsync(code);
            
            if (success)
            {
                Logger.LogInformation("GitHub authentication successful, will redirect to analytics");
                shouldRedirect = true;
                isLoading = false;
            }
            else
            {
                Logger.LogError("GitHub authentication failed");
                errorMessage = "Failed to authenticate with GitHub. Please try again.";
                isLoading = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during GitHub authentication");
            errorMessage = "An unexpected error occurred during authentication.";
            isLoading = false;
        }
    }

    private void RetryAuthentication()
    {
        Navigation.NavigateTo("/code-quality-analytics");
    }

    private void GoToAnalytics()
    {
        Navigation.NavigateTo("/code-quality-analytics");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Handle redirect after successful authentication
        if (shouldRedirect && firstRender)
        {
            shouldRedirect = false; // Reset flag
            await Task.Delay(100); // Small delay to ensure component is ready
            Navigation.NavigateTo("/code-quality-analytics");
        }
    }
} 